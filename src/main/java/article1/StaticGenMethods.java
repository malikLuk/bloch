/**
 *
 *                                                  Рассмотреть возможность замены
 *                                            конструкторов статическими методами генерации.
 * Обычно, для создания объекта используется открытый(public) конструктор. Есть и другой отличный прием - класс может
 * иметь открытый статический метод генерации(static factory method), который является просто статическим методом,
 * возращающим экземпляр класса(объект). Простой пример такого метода возьмем из класса Boolean. В нем есть метод,
 * преобразующий значение простого boolean в ссылку на объект Boolean:
 *
 * public static Boolean valueOf(boolean b) {
    return (b ? TRUE : FALSE);
   }
 * где TRUE и FALSE это
    public static final Boolean TRUE = new Boolean(true);
    public static final Boolean FALSE = new Boolean(false);
 * Замена открытого конструктора статическим методом генерации имеет как преимущества, так и недостатки.
 *
 * Первое приемущество состоит в том, что, в отличие от конструкторов - статический метод генерации имеет название, тогда как
 * параметры коснтрутора сами по себе не дают описания возвращаемого объекта. Это дает нам более понятный программный код при
 * работе с классом. Класс может иметь только один констурктор с заданной сигнатурой. программисты обходят это ограничение,
 * создавая конструкторы, чьи списки параметров отличаются только порядком следования параметров. Поэтому запомнить,
 * какой конструктор для чего нужен становится трудным. А с именованными статическими методами генерации мы не получим
 * таких ограничений, и можем создать несколько методов с одинаковой сигнатурой и назвать их соотвествующе.
 *
 * Второе преимущество статических методов генерации состоит в том, что, в отличие от конструкторов, они не обязаны при
 * каждом вызове создавать новый объект. Это позволяет использловать для неизменяемых классов предварительно созданные
 * объекты, либо кэшировать объекты по мере их создания, а затем раздавать их повторно, избегая создания дублирующих
 * ненужных объектов. Это, кстати, иллюстрирует вышеуказанный метод Boolean.valueOf(boolean b); - он не создает объектов.
 * Способность статических мтеодов генерации при повторных вызовах возвращать тот же самый объект позволяет классам в
 * любой момент времени четко контролировать, какие объекты еще сущесвтуют.
 *
 * Третье преимущство статических методов генерации в том, что, в отличие от конструткоров, они могут возвращать объект,
 * который соответствует не только заявленному типу возвращаемого значения, но и любому его подтипу.
 *
 * Четвертое преимущество - уменьшение многословия при создании объектов с параметрами(дженериками).
 * Нам всегда надо определить параметры типа при вызове конструктора классов с параметрами, даже если они понятны из
 * контекста. Например
    Map<String, List<String>> m = new HashMap<String, List<String>>();
 * Эта излишняя спецификация становится проблемой при возрастании сложности параметрических типов. При использовани
 * статических методов генерации, компилятор может осздать это за нас. Это называется type interface. Вот, например, так
    public static <K, V> HashMap<K, V> newInstance() {
        return new HashMap<K, V>;
    }
 *
 * Основной недостаток использования только статических методов генерации заключается в том, что классы, не имеющие
 * открытых или защищенных конструкторов, не могут иметь подклассов (???).
 *
 * Второй недостаток в том, что их трудно отличить от других статических методов.
 *
 *
 * */

package article1;

public class StaticGenMethods {

    public static void main(String[] args) {
        A<String> as = new A<String>();
        as.add("kk");
    }

}
