/**
 *
 * Отдавать предпочтение внедрению зависимостей жестко прошитым ресурсам.
 * Например, у нас есть класс для проверки орфографии. Мы Можем реализовать его неинстанциируемым классом с набором методов для проверки
 * орфографии. Также в классе есть инстанс словаря, по которому мы и сверяем орфографию. Второй подход, мы можем реализовать такой класс
 * синглтоном, где мы у единственного инстанса вызываем методы для проверки орфографии, в синглтоне мы также инстанциировали словарь, по
 * которому смотрим орфографию. Оба эти подхода плохие, потому что предполагают существование лишь одного словаря, которые инстанциируют
 * внутри себя в начале работы. Но словарей может быть несколько, более того, несколько на каждый язык.
 * Статические служебные классы (первый подход) и синглтоны (второй подход) непригодны для классов, поведение которых параметризовано
 * лежащим в их основе ресурсом (словарем).
 * В нашем случае решением будет просто передача словаря конструктору класса, отвечающего за проверку орфографии. Это одна из форм
 * внедрения зависимостей. Словарь является зависимостью класса проверки орфографии и внедряется в него при создании инстанса. Также зависимости
 * могут внедряться через сеттер.
 * Полезная разновидность схемы состоит в передаче конструктору фабрики ресурсов. Фабрика - это объект, который многократно вызывается для
 * создания экземпляров типа. Такие фабрики воплощают шаблон "фабричный метод" и тут нам поможет Supplier<T>, где T будет ограничен нужным
 * нам базовым типом (например, провершик орфографии). То есть, у нас есть базовый класс SpellChecker, от него мы хотим сделать проверщика
 * русской орфографии RussianSpellChecker и Supplier у нас будет выглядеть так Supplier<? extends SpellChecker>.
 * Резюме: не надо использовать синглтон или статический служебный класс для реализации класса, который зависит от каких-либо базовых
 * ресурсов, поведение которых влияет на этот класс. А также нельзя давать классу возможность создавать эти ресурсы самостоятельно. Вместо
 * этого надо передавать (внедрять) ресурсы или фабрики для их создания конструктору (или статической фабрике или строителю).
 *
 * */

package diff_articles;

public class DependencyInjection {
}
