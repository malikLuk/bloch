/**
 *
 * Избегать применения строк там, где уместнее другой тип.
 * Строки - плохая замена другим типам значений. Когда данные попадают в программу из файла, сети или с клавиатуры, они зачастую имеют вид строки.
 * Стремеление оставить все как есть - естественное, но так делать стоит лишь тогда - когда эти данные по своей природе являются текстом. Если это
 * числовые данные - они должны быть преобразованы в соответствующий тип (int, float etc). В общем случае, если для данных есть подходящий тип, не
 * важно, примитивный или ссылочный, им надо воспользоваться. Если такого нет - лучше его написать.
 * Строки - плохая замена для перечислений. Перечисления лучше подходят в качестве констант перечислимых типов, чем строки.
 * Строки - плохая замена для агрегантых типов. Если некая сущность состоит из нескольких компонентов, то попытка представить ее одной строкой
 * как правило является плохим решением. Вот например:
 *  String compoundKey = className + "#" + i.next();
 * Этот подход имеет множество недостатков. Если в одном из полей встретится символ "#" - у нас будут проблемы. Для получения доступа к отдельным
 * составляющим строки - нужно будет выполнить ее анализ - а это медленная операция. Также для строк мы не можем переопределить методы equals,
 * toString, compareTo и вынуждены принять поведение этих методов от класса String. Лучше всего представить compoundKey как инстанс отдельно
 * написанного класса с двумя полями.
 * Строки - плохая замена устойчивым к подделке ключам. Это уже не сильно актуально, так как имелась ввиду идентификация конкретной переменной
 * и "привязка" ее к потоку в многпоточной среде для использования этим же одним потоком. Но сейчас уже есть ThreadLocal.
 *
 * */

package diff_articles;

public class StringAvoid {
}
