/**
 *
 *                                          Использовать экзекуторы и таски
 *                                                  вместо потоков.
 * С помощью службы экзекуторов можно сделать множество вещей. Например, можно подождать, пока завершиться определенная
 * задача или подождать, пока завершаться все задачи из коллекции задач(invokeAny/invokeAll), подождать, пока служба
 * экзекуторов корректно завершиться(awaitTermination после shutdown), вывести результаты выполнения и т д.
 * Выбор службы экзекуторов зависит от конкретной задачи. Например, если мы пишем легконагруженный сервер, то использование
 * Executors.newCachedThreadPool обычно, является хорошим выбором, так как не требует конфигурации. Для высоконагруженного
 * же сервера выбор кэшированного пула потоков - неудачная идея, так как в нем поступаемые задачи не ставятся в очередь,
 * а отправляются сразу на выполнение. Если нет доступных потоков - то просто создается новый. Так что, если сервер уже
 * нагружен, то создание еще одного потока прибьет его к чертям. Следовательно, для работы высоконагруженного сервера
 * лучше использовать Executors.newFixedThreadPool, который дает нам фиксированное число потоков. Или вообще использовать
 * ThreadPoolExecutor для максимального контроля.
 * Следует не только воздержатться от написания собственных очередей, но также и от работы непосредственно с потоками.
 * Thread, который раньше служил в качестве рабочей единицы механизма выполнения, больше не является ключевым понятием.
 * Теперь рабочая единица и механизм разделены. Ключевым понятием теперь является рабочая единица, которая называется
 * задачей. есть два вида задач: Runnable и Callable(который похож на Runnable, но он возвращает значение). Общий механизм
 * выполнения задач называется службой экзекуторов.
 * У структуры экзекуторов есть замена для java.util.Timer - это ScheduledThreadPoolExecutor, другими словами, экзекутор
 * пула потоков с расписанием, и он поддерживает многопоточность, в то время как Timer работает в одном потоке и может
 * наебнуться.
 *
 * */


package ch10.article68;

public class Executors {
}
